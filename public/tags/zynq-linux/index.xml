<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zynq linux; on Tagore&#39;s Studio</title>
    <link>http://github.wuquantai.com/tags/zynq-linux/</link>
    <description>Recent content in zynq linux; on Tagore&#39;s Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 20 Apr 2019 13:59:51 +0000</lastBuildDate>
    
	<atom:link href="http://github.wuquantai.com/tags/zynq-linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>zynq 嵌入式开发总结</title>
      <link>http://github.wuquantai.com/</link>
      <pubDate>Sat, 20 Apr 2019 13:59:51 +0000</pubDate>
      
      <guid>http://github.wuquantai.com/</guid>
      <description>传统开发步骤 基础设计
&amp;lt;code&amp;gt;# 使用Vidado 设计硬件工程，导出硬件设计 bitstream. $ File-&amp;gt; Export-&amp;gt; Export Hardware... # 使用SDK 生成 fsbl.elf # 编译U-boot $ make CROSS_COMPILE=arm-xilinx-linux-gnueabi- zynq_ac7020_defconfig # 使用SDK， Xilinx Tools-&amp;gt;Create Boot Image 生成BOOT.BIN。 即: fsbl.elf + system_wrapper.bit + u-boot.elf&amp;lt;/code&amp;gt;  编译kernel
&amp;lt;code&amp;gt;$ make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- uImage LOADADDR=0x00008000 # 生成 /arch/arm/boot/uImage&amp;lt;/code&amp;gt;  编译device tree
&amp;lt;code&amp;gt;$ dtc -I dts -O dtb devicetree.dtb ./arch/arm/boot/dts/AC7020.dts&amp;lt;/code&amp;gt;  制作文件系统
&amp;lt;code&amp;gt;$ 基于RAM 的 ramdisk $ 基于Flash 的 jffs2 $ 基于network 的 NFS&amp;lt;/code&amp;gt;  将 BOOT.</description>
    </item>
    
  </channel>
</rss>