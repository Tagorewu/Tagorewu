<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Develop on Tagore&#39;s Studio</title>
    <link>http://github.wuquantai.com/categories/web-develop/</link>
    <description>Recent content in Web Develop on Tagore&#39;s Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 14 Dec 2016 14:25:28 +0000</lastBuildDate>
    
	<atom:link href="http://github.wuquantai.com/categories/web-develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于Apache httpd 的SSI和cgi使用和思考</title>
      <link>http://github.wuquantai.com/</link>
      <pubDate>Wed, 14 Dec 2016 14:25:28 +0000</pubDate>
      
      <guid>http://github.wuquantai.com/</guid>
      <description>因为在单片机上的web服务是使用删减版的httpd服务器，只保留最原始的扩展功能，SSI和CGI。无法像pc上的服务器可以使用php,jsp之类的引擎。 SSI主要是为了往网页里面插入实时的变量，CGI主要是处理客户端发送来的请求。这样即使是最古老的浏览器也不会有什么兼容性问题。 但是这样的做法的结果是服务端的编程变繁琐了。作为单片机这种嵌入式web应用，应该尽可能工作量放在客户端来完成，减少服务端的复杂度。而且不需要太考虑兼容古老的浏览器，因为落后的东西就应该被淘汰。
早期的浏览器作为通用的客户端只拥有简单的功能，比如实现get和post等几个方法。大量的跳转和内容生成是在服务端运行的，就造成服务器的负载较大。自从javascript成为浏览器端标准的脚本语言后，各种网站的内容交互方式就变得更加自由了。我这里感受最深的就是使用客户端脚本把动态网页的生成工作放在浏览器端来做，数据由ajax 单独请求更新。嵌入式web经常需要显示一些实时的数据，把单独的数据请求放在后台实时更新，然后由脚本把它填写至网页。不像早期的技术使用SSI，服务端需要检索整个网页的SSI tag，然后查找变量，将数据实时更新至网页，然后发送整张网页。可以想服务端的压力有多大。其实这种思维模式就像网站程序和网站数据分开放一个道理。好处多多！ 因为用单片机的web服务器调试前端代码会比较繁琐，要转码要下载，频繁修改就不方便。所以直接在pc的web服务器上调试前端代码，并且使用SSI和CGI，模仿单片机C后台的动作，这里要有一些技巧。 在Apache httpd web服务器上使用SSI和cgi，可以参考服务器主页上的帮助文档http://httpd.apache.org/docs/current/howto/ssi.html。这里简单做个记录。
 SSI 按照官方介绍把SSI功能打开。怎么设置httpd.conf就不多说。这里简单记录下其使用规则。
想设置某个SSI tag时，可以使用
[html]
[/html]
在需要调用它的地方使用
[html]
[/html]
就可以显示出 xxxx 了。 仅仅是这样使用，跟我们在使用最原始的SSI还是有点不一样。 为了方便调试，我们可以在页面上头加上
[html]
[/html]
重定义这个未找到SSI时的提示语言，原本的提示语言很长，不方便调试。
 CGI有几个要点：
 CGI开启后，默认设置ScriptAlias是只执行cgi-bin下的脚本。你可以将自己的web目录添加进去，因为实际请求的路径不一定是/cgi-bin。 这里可以用perl、python或者bash脚本来模仿单片机c的后端应答动作。这样调试好前端代码后，下进单片机后再慢慢调试后端代码就方便了。注意在perl前面要设置好perl.exe的路径。同时可以修改.pl后缀为我们想要的.cgi它也可以得到执行。完美模仿单片机后端逻辑！ Get!  </description>
    </item>
    
    <item>
      <title>Http Authorization</title>
      <link>http://github.wuquantai.com/</link>
      <pubDate>Wed, 23 Nov 2016 09:24:20 +0000</pubDate>
      
      <guid>http://github.wuquantai.com/</guid>
      <description>Basic Authorization
从最初的基本的授权方式说起。 http头里添加：WWW-Authenticate: Basic realm=&amp;quot;xxx&amp;rdquo; 即可要求浏览器输入授权信息。 浏览器发送时会附带授权信息：Authorization:Basic YWRtaW46YWRtaW4= 它是由base64加密的。如上解密后为：admin:admin
Basic authorization 的授权方式就是每个请求中在http头里都携带着base64加密的授权信息，服务器在每次收到请求时都要进行权限判断，再执行对应的操作。
由于考虑到授权，那自然涉及到了客户端状态。http /0.9是无状态无连接的协议，一个特定的输入就对应一个特定的输出。由于http 不需要很强的实时性，属于一问一答的对话形式，且有时并发性强，不可能是一对一的专人(线程)负责一个会话。所以如果涉及到状态就不如把状态参数放置在请求中，服务端就要先对请求中携带的状态进行判断，再判断对应的操作是否有权限等等。按数字电路的理论，服务端的业务就变成两段式状态机的组合逻辑部分。状态部分可以保存在客户端或者服务端，这就变成了cookie和session了。
http /1.0增加了keep-alive 选项，http /1.1则默认了所有连接都有keep-alive选项。http keep-alive 选项就是说 发送完响应之后不服务端不主动关闭连接(http /0.9 是会主动关闭连接的)。http 的keep-alive 应该通过是tcp的keep-alive 定时心跳来维持的，不过http的keep-alive 还有一层意思是即使tcp 连接断开了，http的session还是keep alive的，http 可能也维护着一个保活定时器去试探每个连接上的客户端是否仍在线(这个不清楚)。
当http涉及到用户的概念时，就需要识别用户了，可能最早http识别一个客户端的方法跟标识一个tcp连接的方法是一样的，即IP+Port的形式来断定。然后变成 client 的（IP+Port+uid+password)的，也就是Basic Authorization的方式。状态信息可以放在url(GET)，http header(authorizatin, cookie) 或者 post content里面。
对安全性的考虑：
由于每次都携带用户名和密码的这种请求方式极不安全，所以衍生版本就是用cookie来替代每次都携带的用户名和密码，这样就算cookie被人获取利用，也不会泄漏用户名和密码。只有在登陆的时候会传输一次用户名和密码。再者base64是可逆的加密方式，后面也使用不可逆的加密方式如md5（因为它是有损的加密，不可能还原出原密是什么）。但是如果被抓包，还是会被黑客冒名向服务器发出请求。所以早期网上支付等等就需要k宝，动态口令卡之类的东西。现在由于TLS/SSL等技术的出现，http on TLS/SSL 就很安全了。传输层或者socket层之上的信息全部使用密钥加双方证书加密，再靠抓包破解就很难了，所以这几年网络支付又火了起来。
PS: 看了一个wordpress登录的时候是直接POST 明文用户名加密码，好危险。
FAQ: Chrome delete authorization information 在使用 header(&amp;lsquo;WWW-Authenticate: Basic realm=&amp;quot;userlogin&amp;rdquo;&#39;); 调试用户登录授权时，浏览器总是会保存之前输入的授权信息。想输入其它用户测试都不行。 所以有两个方法：
 使用隐私窗口调试。 在url之前增加 &amp;ldquo;admin@&amp;rdquo; 就可以输入新的授权信息了。  php 的header函数，和html 中的标签效果的区别 两个都用来产生response header的，不同的是前者应该直接由服务端在http header里的添加值对。后者只是将值对放在html中传送，由浏览器来解析。这可以在浏览器中调试发现它们的区别。</description>
    </item>
    
    <item>
      <title>HTTP协议与HTTP表单传输格式</title>
      <link>http://github.wuquantai.com/</link>
      <pubDate>Wed, 13 Apr 2016 07:27:50 +0000</pubDate>
      
      <guid>http://github.wuquantai.com/</guid>
      <description>HTTP请求 从使用者的角度看，一个HTTP请求起始于 用户端浏览器上输入的一个URL地址； 网页中的一个超链接； 提交一个HTML表单。 但本质上说，一个HTTP请求起始于用户端向HTTP服务器发送的一个URL请求。 一个标准的HTTP请求由以下几个部分组成
[code] [] [/code]
在HTTP请求中，第一行是请求行（request-line），用来说明请求类型、要访问的资源（URL）以及使用的HTTP版本； 紧接着是多行头部（headers）信息，用来说明服务器要使用的附加信息； 头部信息之后是一个回车换行符（/r/n），用于标明头部信息的结束。 以上是必须内容，根据需要可在头部信息结束之后增加主体数据（request-body）； 主体数据之后是一个回车换行符（/r/n），用于标明主体数据的结束。
需要注意的是 请求行（request-line）中的URL部分必须以application/x-www-form-urlencoded方式编码。 主体数据（request-body）的编码方式由头部（headers）信息中的Content-Type指定。 主体数据（request-body）的长度由头部（headers）信息中的Content-Length指定。
例如，我们可以在IE浏览器上输入下面的网址： http://localhost:8000/hello/index.html HTTP请求的头部信息如下： [code] GET /hello/index.html HTTP/1.1 Accept: / Accept-Language: zh-cn Accept-Encoding: gzip, deflate Host: localhost:8000 Connection: Keep-Alive Cookie: JSESSIONID=BBBA54D519F7A320A54211F0107F5EA6
[/code] 上述信息没有request-body部分，这是以GET方式发送的HTTP请求。如果请求中需要附加主体数据，即增加request-body部分，则必须使用POST方式发送HTTP请求。HTML超链接（）只能用GET方式提交HTTP请求，HTML表单()则可以使用两种方式提交HTTP请求。 HTML表单 HTML表单的使用方法如下：
[html] &amp;hellip;
表单中存在各种类型的表单域标签，如
[html] 、及。 [/html]
每一种表单域标签均有NAME与VALUE两种标签属性。这两个标签属性决定了表单提交时传送的属性名及相应的值。 目标地址（URL） action标签属性指定了表单提交的目标地址，其值可以是完整的URL。如：
[html] &amp;hellip;
这样的表单是不符合要求的。如果其URL值存在非法字符（如中文字符），应将其进行URL Encoding处理。URL Encoding的处理方法如下： 字母数字字符 &amp;ldquo;a&amp;rdquo; 到 &amp;ldquo;z&amp;rdquo;、&amp;ldquo;A&amp;rdquo; 到 &amp;ldquo;Z&amp;rdquo; 和 &amp;ldquo;0&amp;rdquo; 到 &amp;ldquo;9&amp;rdquo; 保持不变。 特殊字符 &amp;ldquo;.&amp;quot;、&amp;quot;-&amp;quot;、&amp;quot;*&amp;rdquo; 和 &amp;ldquo;_&amp;rdquo; 保持不变。 空格字符 &amp;quot; &amp;quot; 转换为一个加号 &amp;ldquo;+&amp;rdquo;。 所有其他字符都是不安全的，因此首先使用一种编码机制将它们转换为一个或多个字节。然后对每个字节用一个包含 3 个字符的字符串 &amp;ldquo;%xy&amp;rdquo; 表示，其中 xy 为该字节的两位十六进制表示形式。推荐的编码机制是 UTF-8。 将“中文”两个字符进行URL Encoding所得到的值就是“%E4%B8%AD%E6%96%87”。 所以正确的表单应该是：</description>
    </item>
    
    <item>
      <title>SSI Tag的使用</title>
      <link>http://github.wuquantai.com/</link>
      <pubDate>Tue, 12 Apr 2016 03:00:09 +0000</pubDate>
      
      <guid>http://github.wuquantai.com/</guid>
      <description>这里先说最原始的使用SSI tag的方式，因为这样做在C开发中最简单。跟后来通用的web服务器的SSI有点不一样，因为后来为了使上层开发更方便，又进行了一些封装。 最原始的SSI是这样规定的，如在html中嵌入SSI tag。使用
[code]&amp;lt;&amp;ndash;#tagname&amp;ndash;&amp;gt;[/code]
;，则当Web服务器生成网页时，会将当前的标签后插入所指定的内容。这就是SSI Tag的作用。 SSI可以说是最初动态生成网页的方法，不仅仅是用来插入一些变量也可以直接插入javascript、json等等你想要发送给客户端的内容！一般用SSI来插入静态变量比较方便，如果是插入input框的当前值的话，可以往SSI中插入一段javascript代码或者是json格式的数据，再用javascript把这些实时的值加载进input框。
[html]
其Tag 在Web 服务端代码中作如下定义,并定义其序号的宏。
[c] static const char *g_pcConfigSSITags[] = { &amp;ldquo;ipaddr&amp;rdquo;, // SSI_INDEX_IPADDR &amp;ldquo;macaddr&amp;rdquo;, // SSI_INDEX_MACADDR &amp;ldquo;p0br&amp;rdquo;, // SSI_INDEX_P0BR &amp;ldquo;p0sb&amp;rdquo;, // SSI_INDEX_P0SB &amp;ldquo;p0p&amp;rdquo;, // SSI_INDEX_P0P &amp;ldquo;p0bc&amp;rdquo;, // SSI_INDEX_P0BC &amp;ldquo;p0fc&amp;rdquo;, // SSI_INDEX_P0FC &amp;ldquo;p0tt&amp;rdquo;, // SSI_INDEX_P0TT &amp;ldquo;p0tlp&amp;rdquo;, // SSI_INDEX_P0TLP &amp;ldquo;p0trp&amp;rdquo;, // SSI_INDEX_P0TRP &amp;ldquo;p0tip&amp;rdquo;, // SSI_INDEX_P0TIP &amp;ldquo;p0tip1&amp;rdquo;, // SSI_INDEX_P0TIP1 &amp;ldquo;p0tip2&amp;rdquo;, // SSI_INDEX_P0TIP2 &amp;ldquo;p0tip3&amp;rdquo;, // SSI_INDEX_P0TIP3 &amp;ldquo;p0tip4&amp;rdquo;, // SSI_INDEX_P0TIP4 &amp;ldquo;p0tnm&amp;rdquo;, // SSI_INDEX_P0TNM &amp;ldquo;p1br&amp;rdquo;, // SSI_INDEX_P1BR &amp;ldquo;p1sb&amp;rdquo;, // SSI_INDEX_P1SB &amp;ldquo;p1p&amp;rdquo;, // SSI_INDEX_P1P &amp;ldquo;p1bc&amp;rdquo;, // SSI_INDEX_P1BC &amp;ldquo;p1fc&amp;rdquo;, // SSI_INDEX_P1FC &amp;ldquo;p1tt&amp;rdquo;, // SSI_INDEX_P1TT &amp;ldquo;p1tlp&amp;rdquo;, // SSI_INDEX_P1TLP &amp;ldquo;p1trp&amp;rdquo;, // SSI_INDEX_P1TRP &amp;ldquo;p1tip&amp;rdquo;, // SSI_INDEX_P1TIP &amp;ldquo;p1tip1&amp;rdquo;, // SSI_INDEX_P1TIP1 &amp;ldquo;p1tip2&amp;rdquo;, // SSI_INDEX_P1TIP2 &amp;ldquo;p1tip3&amp;rdquo;, // SSI_INDEX_P1TIP3 &amp;ldquo;p1tip4&amp;rdquo;, // SSI_INDEX_P1TIP4 &amp;ldquo;p1tnm&amp;rdquo;, // SSI_INDEX_P1TNM &amp;ldquo;modname&amp;rdquo;, // SSI_INDEX_MODNAME &amp;ldquo;pnpport&amp;rdquo;, // SSI_INDEX_PNPPORT &amp;ldquo;disable&amp;rdquo;, // SSI_INDEX_DISABLE &amp;hellip; }; [/c]</description>
    </item>
    
  </channel>
</rss>