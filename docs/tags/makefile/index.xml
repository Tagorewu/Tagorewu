<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Makefile on Tagore&#39;s Studio</title>
    <link>/tags/makefile/</link>
    <description>Recent content in Makefile on Tagore&#39;s Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 28 Mar 2016 11:58:59 +0000</lastBuildDate>
    
	<atom:link href="/tags/makefile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>make工具使用</title>
      <link>/post/make%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 28 Mar 2016 11:58:59 +0000</pubDate>
      
      <guid>/post/make%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>Makefile 正如其名作为一个制作文件的工具，大大方便了进行大批量文件编译时的工作流程。这里简单的记录一个make 工具的基本使用规则。
1. Makefile 基本规则：  target... : prerequisites ...command......-------------------------------------------------------------------------------target: 为目标文件，即所要生成的对象;
prerequisites : 为要生成target所需要的文件或是目标;
command: 即make需要执行的命令，(任意的shell命令，即对应编译器或者平台的命令)。
第一行表示依赖关系，第二行是规则。( 第二行必须由Tab键开头 )。
注意：
a. 只敲入make命令默认执行第一个target。
b. command 要用Tab键缩进
2. 比如有源文件：main.c api.c api.h 用gcc 作编译的过程：
gcc -c main.c gcc -c api.c gcc -o main main.o api.o写成Makefile的话就是:
 main: main.o api.ogcc -o main main.o api.omain.o: main.cgcc -c main.capi.o: api.c api.hgcc -c api.c 另外Makefile简化格式：</description>
    </item>
    
  </channel>
</rss>